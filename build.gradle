buildscript {
    repositories {
        gradlePluginPortal()
        maven {
			     url = 'https://repo.spring.io/plugins-release'
			        if (project.hasProperty('artifactoryUsername')) {
				          credentials {
					             username "$artifactoryUsername"
					                  password "$artifactoryPassword"
				          }
			        }
		    }
    }
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:0.17.0"
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
        classpath("io.spring.gradle:spring-io-plugin:0.0.6.RELEASE")
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.12.0"
        classpath 'org.hidetake:gradle-ssh-plugin:2.10.1'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.10.0'
    }
}

plugins {
	id 'org.asciidoctor.jvm.pdf' version '3.3.2'
	id 'org.asciidoctor.jvm.gems' version '3.3.2'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

repositories {
	maven { url 'https://repo.spring.io/plugins-release' }
	mavenCentral()
}

ext {
	docResourcesVersion = '0.2.5'
}

configurations {
	docs
}

dependencies {
	docs "io.spring.docresources:spring-doc-resources:${docResourcesVersion}@zip"
}

task prepareAsciidocBuild(type: Sync) {
	dependsOn configurations.docs
	from {
		configurations.docs.collect { zipTree(it) }
	}
	from 'src/docs/asciidoc/'
	into "$buildDir/asciidoc"
}

asciidoctorPdf {
	dependsOn prepareAsciidocBuild

	options doctype: 'book'

	attributes 'icons': 'font',
		'sourceDir': '$buildDir/asciidoc',
		'outputDir': '$buildDir/docs',
		'sectanchors': '',
		'sectnums': '',
		'toc': '',
		'source-highlighter' : 'coderay',
		revnumber: project.version,
		'project-version': project.version,
		'docinfo': 'shared',
		'spring-ldap-version' : project.version
}

asciidoctorj {
	version = '2.4.2'
	options doctype: 'book'
	attributes  'docinfo': 'shared',
		stylesdir: 'css/',
		stylesheet: 'spring.css',
		'linkcss': true,
		'icons': 'font',
		'sectanchors': '',
		'source-highlighter': 'highlight.js',
		'highlightjsdir': 'js/highlight',
		'highlightjs-theme': 'github',
		'idprefix': '',
		'idseparator': '-',
		'allow-uri-read': '',
		'toc': 'left',
		'toclevels': '4',
		revnumber: project.version,
		'project-version': project.version,
		'spring-ldap-version' : project.version
}

asciidoctor {
//	dependsOn asciidoctorPdf
	dependsOn prepareAsciidocBuild
	baseDirFollowsSourceFile()
	sourceDir "$buildDir/asciidoc"
	inputs.dir(sourceDir)

	sources {
		include 'index.adoc'
	}

	resources {
		from(sourceDir) {
			include 'images/*', 'css/**', 'js/**'
		}
	}
}

ext.GRADLE_SCRIPT_DIR = "${rootProject.projectDir}/gradle"
apply from: "${GRADLE_SCRIPT_DIR}/finalize-deploy.gradle"
ext.JAVA_MODULE_SCRIPT = "${GRADLE_SCRIPT_DIR}/java-module.gradle"
ext.MAVEN_DEPLOYMENT_SCRIPT = "${GRADLE_SCRIPT_DIR}/maven-deployment.gradle"
ext.JAVA_SCRIPT = "${GRADLE_SCRIPT_DIR}/java.gradle"
ext.RELEASE_CHECKS_SCRIPT = "${GRADLE_SCRIPT_DIR}/release-checks.gradle"
ext.SPRING_SNAPSHOT_TEST_SCRIPT = "${GRADLE_SCRIPT_DIR}/spring-snapshot-test.gradle"

ext.coreModules = subprojects.findAll { p-> (!p.name.equals('spring-build-src') && !p.name.contains("test") && !p.name.contains("sample") && !p.name.contains("sandbox")) || p.name.contains("spring-ldap-test") }

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: "com.github.ben-manes.versions"

    group = "org.springframework.ldap"

    ext.releaseBuild = version.endsWith('RELEASE')
    ext.snapshotBuild = version.endsWith('SNAPSHOT')

    ext.javadocLinks = [
        "https://docs.oracle.com/javase/7/docs/api/",
        "https://docs.spring.io/spring/docs/3.2.x/javadoc-api/",
        "https://logging.apache.org/log4j/1.2/apidocs/",
        "https://commons.apache.org/proper/commons-logging/apidocs/",
        "https://commons.apache.org/proper/commons-dbcp/apidocs/",
        "https://commons.apache.org/proper/commons-pool/apidocs/",
        "http://junit.sourceforge.net/javadoc/",
    ] as String[]
}


configure(subprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
    apply plugin: 'groovy'
    apply plugin: "merge"
}

configure(coreModules) {
    apply from: JAVA_MODULE_SCRIPT
}

configure(subprojects - coreModules) {
    tasks.findByPath("artifactoryPublish")?.enabled = false
    tasks.findByPath("uploadArchives")?.enabled = false
}

description = "Spring LDAP"

configurations.archives.artifacts.clear()
apply from: "${GRADLE_SCRIPT_DIR}/deploy-docs.gradle"
apply from: "${GRADLE_SCRIPT_DIR}/deploy-schema.gradle"

task api(type: Javadoc) {
    group = "Documentation"
    description = "Generates aggregated Javadoc API documentation."
    title = "${rootProject.description} ${version} API"

    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = rootProject.description
    options.splitIndex = true
    options.links(project.ext.javadocLinks)

    maxMemory = "1536m"
    destinationDir = new File(buildDir, "api")

    source coreModules*.javadoc*.source
    classpath = files(coreModules*.javadoc*.classpath)
}

task docsZip(type: Zip, dependsOn: asciidoctor) {
    group = "Distribution"
    baseName = "spring-ldap"
    classifier = "docs"
    description = "Builds -${classifier} archive containing api and reference " +
        "for deployment at https://docs.spring.io/spring-ldap/docs."

    from("src/dist") {
        include "changelog.txt"
    }

    from (api) {
        into "apidocs"
    }

    from (new File(asciidoctor.outputDir, "html5")) {
        include "*.html"
        into "reference"
    }
}

task schemaZip(type: Zip) {
    group = 'Distribution'
    baseName = rootProject.name
    classifier = 'schema'
    description = "Builds -${classifier} archive containing all " +
        "XSDs for deployment at static.springframework.org/schema."

    coreModules.each { module ->
        def Properties schemas = new Properties();

        module.sourceSets.main.resources.find {
            it.path.endsWith('META-INF/spring.schemas')
        }?.withInputStream { schemas.load(it) }

        for (def key : schemas.keySet()) {
            def shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, '$1')
            assert shortName != key
            File xsdFile = module.sourceSets.main.resources.find {
                it.path.endsWith(schemas.get(key))
            }
            assert xsdFile != null
            into (shortName) {
                duplicatesStrategy 'exclude'
                from xsdFile.path
            }
        }
    }
}


task distZip(type: Zip, dependsOn: [docsZip]) {
    dependsOn subprojects*.tasks*.matching { task -> task.name == 'assemble' }

    group = "Distribution"
    baseName = "spring-ldap"
    classifier = "dist"
    description = "Builds -${classifier} archive, containing all jars and docs, " +
                "suitable for community download page."

    ext.baseDir = "${baseName}-${project.version}"


    from("src/dist") {
        include "readme.md"
        include "license.txt"
        include "notice.txt"
        into "${baseDir}"
        expand(copyright: new Date().format("yyyy"), version: project.version)
    }

    from(zipTree(docsZip.archivePath)) {
        into "${baseDir}/docs"
    }

    coreModules.each { subproject ->
        into ("${baseDir}/libs") {
            from subproject.jar
            if (subproject.tasks.findByPath("sourcesJar")) {
                from subproject.sourcesJar
            }
            if (subproject.tasks.findByPath("javadocJar")) {
                from subproject.javadocJar
            }
        }
    }
}

artifacts {
    archives docsZip
    archives distZip
    archives schemaZip
}


if (project.hasProperty('artifactoryUsername')) {
	allprojects { project ->
		project.repositories { repos ->
			all { repo ->
				if (!repo.url.toString().startsWith("https://repo.spring.io/")) {
					return;
				}
				repo.credentials {
					username = artifactoryUsername
					password = artifactoryPassword
				}
			}
		}
	}
}
