buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:0.36.0"
        classpath "io.spring.gradle:dependency-management-plugin:1.1.0"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.28.2"
        classpath 'org.hidetake:gradle-ssh-plugin:2.10.1'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0'
        classpath "io.spring.javaformat:spring-javaformat-gradle-plugin:$springJavaformatVersion"
    }
}

plugins {
    id 'io.spring.antora.generate-antora-yml' version '0.0.1'
    id 'org.antora' version '1.0.0'
}

apply plugin: 'io.spring.convention.root'
apply plugin: 'io.spring.convention.docs'
apply plugin: 'io.spring.javaformat'
apply plugin: 's101'

group = "org.springframework.ldap"
description = "Spring LDAP"

ext.coreModules = subprojects.findAll { p-> (!p.name.contains("test") && !p.name.contains("sample") && !p.name.contains("sandbox")) || p.name.contains("spring-ldap-test") }

configure(subprojects - coreModules) {
	tasks.findByPath("publishArtifacts")?.enabled = false
}

nohttp {
	allowlistFile = project.file("etc/nohttp/allowlist.lines")
	source.exclude "buildSrc/build/**"
}


antora {
    playbook = 'cached-antora-playbook.yml'
    playbookProvider {
        repository = 'spring-projects/spring-ldap'
        branch = 'docs-build'
        path = 'lib/antora/templates/per-branch-antora-playbook.yml'
        checkLocalBranch = true
    }
    options = [clean: true, fetch: !project.gradle.startParameter.offline, stacktrace: true]
}



tasks.named("generateAntoraYml") {
    asciidocAttributes = project.provider( {
        return  ['project-version': project.version]
    } )
}


s101 {
	configurationDirectory = project.file("etc/s101")
}

allprojects {
        if (!['spring-ldap-bom', 'spring-security-docs'].contains(project.name)) {
                apply plugin: 'io.spring.javaformat'
		apply plugin: 'checkstyle'

		pluginManager.withPlugin("io.spring.convention.checkstyle", { plugin ->
                        configure(plugin) {
                                dependencies {
                                        checkstyle "io.spring.javaformat:spring-javaformat-checkstyle:$springJavaformatVersion"
                                }
                                checkstyle {
                                        toolVersion = '8.34'
                                }
                        }
                })

                if (project.name.contains('sample')) {
                        tasks.whenTaskAdded { task ->
                                if (task.name.contains('format') || task.name.contains('checkFormat') || task.name.contains('checkstyle')) {
                                        task.enabled = false
                                }
                        }
                }
        }
}
